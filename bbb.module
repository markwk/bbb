<?php
// $Id$

/**
 * @file
 * BigBlueButton - Enables universities and colleges to deliver a high-quality
 * learning experience.
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 */

// Security Salt
// see /var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
define('BIGBLUEBUTTON_SECURITY_SALT', variable_get('bbb_security_salt', '76b71974198f26ecc5a594eddddf49d1'));

// Define API URLs
define('BIGBLUEBUTTON_BASE_URL', variable_get('bbb_base_url', 'http://195.34.183.202/bigbluebutton/'));
define('BIGBLUEBUTTON_CREATE_URL', 'api/create');
define('BIGBLUEBUTTON_JOIN_URL', 'api/join');
define('BIGBLUEBUTTON_END_MEETING_URL', 'api/endMeeting');
define('BIGBLUEBUTTON_GET_MEETING_INFO_URL', 'api/getMeetingInfo');
define('BIGBLUEBUTTON_IS_MEETING_RUNNING_URL', 'api/isMeetingRunning');
// Define default settings
define('BIGBLUEBUTTON_DISPLAY_MODE', variable_get('bbb_display_mode', 'inline'));
define('BIGBLUEBUTTON_DISPLAY_HEIGHT', variable_get('bbb_display_height', '580px'));
define('BIGBLUEBUTTON_DISPLAY_WIDTH', variable_get('bbb_display_width', '100%'));

include_once(drupal_get_path('modules', 'bbb') . 'includes/api.bbb.inc');

/* Drupal Core Hooks */

/**
 * Implement hook_perm().
 */
function bbb_perm() {
  return array('administer bigbluebutton', 'moderate meetings', 'moderate own meetings', 'attend meetings');
}

/**
 * Implement hook_menu().
 */
function bbb_menu() {
  $items = array();
  $items['node/%node/redirect/attend'] = array(
    'page callback' => 'bbb_redirect',
    'page arguments' => array(1, 3),
    'access callback' => 'bbb_access_attendee',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/redirect/moderate'] = array(
    'page callback' => 'bbb_redirect',
    'page arguments' => array(1, 3),
    'access callback' => 'bbb_access_moderator',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/meeting/attend'] = array(
    'title' => 'Attend Meeting',
    'page callback' => 'bbb_join',
    'page arguments' => array(1, 3),
    'access callback' => 'bbb_access_attendee',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/meeting/moderate'] = array(
    'title' => 'Moderate Meeting',
    'page callback' => 'bbb_join',
    'page arguments' => array(1, 3),
    'access callback' => 'bbb_access_moderator',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/meeting/status'] = array(
    'page callback' => 'bbb_status',
    'page arguments' => array(1),
    'access callback' => 'bbb_access_attendee',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/api.bbb.inc',
  );
  $items['admin/settings/bigbluebutton'] = array(
    'title' => 'BigBlueButton Conferencing',
    'description' => 'Default server and conference settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbb_settings'),
    'access arguments' => array('administer bigbluebutton'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/pages.bbb.inc',
  );
  return $items;
}

/**
 * Check attendance access permissions; Menu access callback
 */
function bbb_access_attendee($node) {
  global $user;
  if (!bbb_is_meeting_type($node->type)) {
    return FALSE;
  }

  // Check for node access and access to join meetings
  if (node_access('view', $node) &&
     (user_access('attend meetings') || user_access('administer bigbluebutton'))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Check moderation access permissions; Menu access callback
 */
function bbb_access_moderator($node) {
  global $user;
  if (!bbb_is_meeting_type($node->type)) {
    return FALSE;
  }

  // Check for node access and access start meetings
  if (node_access('view', $node) &&
     ((user_access('moderate meetings') || user_access('administer bigbluebutton')) ||
      $user->uid == $node->uid && user_access('moderate own meetings'))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implement hook_block().
 */
function bbb_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Meeting details'),
      'weight' => 0,
      'status' => 1,
      'region' => 'left'
    );
    return $blocks;
  }
  elseif ($op == 'configure' && $delta == 0) {
  }
  elseif ($op == 'save' && $delta == 0) {
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        $block = array(
          'subject' => t('Meeting'),
          'content' => bbb_block_meeting(),
        );
        break;
    }
    return $block;
  }
}

/**
 * Meeting details block
 */
function bbb_block_meeting() {
  $output = '';
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $meeting = bbb_get_meeting(arg(1));
    if ($meeting) {
      $output = theme('bbb_block_meeting', $meeting);
    }
  }
  return $output;
}

/**
 * Implement form_alter().
 */
function bbb_form_alter(&$form, &$form_state, $form_id) {

  // Node type settings form
  if ($form_id == 'node_type_form') {
    $form['bbb'] = array(
      '#title' => t('Big Blue Button settings'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['bbb']['bbb_content_type_usage'] = array(
      '#type' => 'checkbox',
      '#title' => t('Treat this node type as conference'),
      '#default_value' => variable_get('bbb_content_type_usage_' . $form['#node_type']->type, FALSE),
    );
    $form['bbb']['bbb_content_type_show_links'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show links to join / start a meeting beneath the node'),
      '#default_value' => variable_get('bbb_content_type_show_links_' . $form['#node_type']->type, FALSE),
    );
    $form['bbb']['bbb_content_type_show_status'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display meeting status on node'),
      '#default_value' => variable_get('bbb_content_type_show_status_' . $form['#node_type']->type, FALSE),
    );
  }

  // Node edit form
  if (drupal_substr($form_id, (drupal_strlen($form_id) - 10), 10) == '_node_form' &&
      bbb_is_meeting_type($form['type']['#value'])) {
    if (is_numeric($form['nid']['#value'])) {
      $meeting = bbb_get_meeting($form['nid']['#value']);
    }

    $form['bbb'] = array(
      '#title' => t('Conference settings'),
      '#type' => 'fieldset',
      '#description' => t("The following settings maybe changed until the conference first starts."),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['bbb']['welcome'] = array(
      '#title' => t('Welcome message'),
      '#type' => 'textfield',
      '#default_value' => $meeting->welcome,
      '#maxlength' => 255,
      '#description' => t('A welcome message that gets displayed on the chat window when the participant joins. You can include keywords (%%CONFNAME%%, %%DIALNUM%%, %%CONFNUM%%) which will be substituted automatically.'),
      '#attributes' => $meeting->meetingToken ? array('disabled' => 'disabled') : array(),
    );
    $form['bbb']['dialNumber'] = array(
      '#title' => t('Dial number'),
      '#type' => 'textfield',
      '#default_value' => $meeting->dialNumber,
      '#maxlength' => 32,
      '#description' => t('The dial access number that participants can call in using regular phone.'),
      '#attributes' => $meeting->meetingToken ? array('disabled' => 'disabled') : array(),
    );
    $form['bbb']['moderatorPW'] = array(
      '#title' => t('Moderator password'),
      '#type' => 'textfield',
      '#default_value' => $meeting->moderatorPW,
      '#maxlength' => 32,
      '#description' => t('The password that will be required for moderators to join the meeting or for certain administrative actions (i.e. ending a meeting). This is optional, and if not supplied, BBB will assign a random password.'),
      '#attributes' => $meeting->meetingToken ? array('disabled' => 'disabled') : array(),
    );
    $form['bbb']['attendeePW'] = array(
      '#title' => t('Attendee password'),
      '#type' => 'textfield',
      '#default_value' => $meeting->attendeePW,
      '#maxlength' => 32,
      '#description' => t('The password that will be required for attendees to join the meeting. This is optional, and if not supplied, BBB will assign a random password.'),
      '#attributes' => $meeting->meetingToken ? array('disabled' => 'disabled') : array(),
    );
    $form['bbb']['logoutURL'] = array(
      '#title' => t('Logout URL'),
      '#type' => 'textfield',
      '#default_value' => $meeting->logoutURL,
      '#maxlength' => 255,
      '#description' => t('The URL that the BigBlueButton client will go to after users click the OK button on the <em>You have been logged out message</em>.'),
      '#attributes' => $meeting->meetingToken ? array('disabled' => 'disabled') : array(),
    );
  }
}

/**
 * Implement hook_nodeapi().
 */
function bbb_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  if (!bbb_is_meeting_type($node->type)) {
    return;
  }

  switch ($op) {
    case 'insert':
      foreach ($node->bbb as $key => $value) {
        if (empty($node->bbb[$key])) {
          unset($node->bbb[$key]);
        }
      }
      bbb_store_meeting($node, $node->bbb);
      break;
    case 'update':
      foreach ($node->bbb as $key => $value) {
        if (empty($node->bbb[$key])) {
          unset($node->bbb[$key]);
        }
      }
      bbb_update_meeting($node, $node->bbb);
      break;
    case 'view':
      $status = bbb_get_user_status($node->nid, $user->uid);
      if ($status && arg(0) == 'node' && arg(1) == $node->nid && !arg(2)) {
        drupal_add_js('var bbb_check_status_url = ' . drupal_to_js(url('node/' . $node->nid . '/meeting/status')), 'inline');
        drupal_add_js(drupal_get_path('module', 'bbb') . '/js/check_status.bbb.js');
        drupal_set_message(t('You signed up for this meeting. Please stay on this page, you will be redirected immediately after the meeting has started.'));
      }

      if (!variable_get('bbb_content_type_show_status_' . $node->type, FALSE)) {
        return;
      }

      $meeting = bbb_get_meeting($node->nid);
      $node->content['bbb_meeting_status'] = array(
        '#value' => theme('bbb_meeting_status', $meeting),
        '#weight' => 10,
      );
      $node->content['bbb_meeting_start'] = array(
        '#value' => theme('bbb_meeting_start', $meeting),
        '#weight' => 10,
      );
      break;
    case 'delete':
      bbb_delete_meeting($node->nid);
      break;
  }
}

/**
 * Implement hook_link().
 */
function bbb_link($type, $object, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && bbb_is_meeting_type($object->type) ) {
    $show = variable_get('bbb_content_type_show_links_' . $object->type, FALSE);
    if (!$teaser && $show) {

      $meeting = bbb_get_meeting($object->nid);
      if ((user_access('moderate meetings') || user_access('administer bigbluebutton')) ||
          $user->uid == $node->uid && user_access('moderate own meetings')) {
        $links['bbb_meeting_join_moderator'] = array(
          'title' => $meeting->is_running ? t('Join meeting as moderator') : t('Start meeting'),
          'href' => "node/$object->nid/meeting/moderate",
        );
      }
      if (user_access('attend meetings') || user_access('administer bigbluebutton')) {
        $links['bbb_meeting_join_attendee'] = array(
          'title' => t('Join meeting'),
          'href' => "node/$object->nid/meeting/attend",
        );
      }

    }
  }
  return $links;
}

/**
 * Implement hook_theme().
 */
function bbb_theme($existing, $type, $theme, $path) {
  return array(
    'bbb_meeting' => array(
      'arguments' => array('meeting' => NULL, 'mode' => NULL, 'params' => array()),
    ),
    'bbb_meeting_status' => array(
      'arguments' => array('meeting' => NULL),
    ),
    'bbb_meeting_join_moderator' => array(
      'arguments' => array('meeting' => NULL),
    ),
    'bbb_meeting_join_attendee' => array(
      'arguments' => array('meeting' => NULL),
    ),
    'bbb_block_meeting' => array(
      'arguments' => array('meeting' => NULL),
    ),
  );
}

/* Helper functions */

/**
 * Check if user is meeting owner
 */
function bbb_is_meeting_owner($nid, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $owner = db_result(db_query("SELECT COUNT(nid) FROM {bbb_meetings} bm
                                 INNER JOIN {node} n ON bm.nid = n.nid
                                 WHERE n.uid = %d
                                   AND nid = %d", $account->uid, $nid));
  return $owner ? TRUE : FALSE;
}

/**
 * Check if node type is meeting
 */
function bbb_is_meeting_type($type) {
  return variable_get('bbb_content_type_usage_'. $type, FALSE);
}

/**
 * Return a meeting object
 */
function bbb_get_meeting($nid, $account = NULL) {
  // Simple static cache
  static $meetings = array();

  if (!$account) {
    global $user;
    $account = $user;
  }

  if (!isset($meetings[$nid])) {
    $meeting = new stdClass();
    $meeting = db_fetch_object(db_query("SELECT * FROM {bbb_meetings} WHERE nid = %d", $nid));

    if ($meeting) {
      $meeting->is_running = bbb_api_isMeetingRunning(array('meetingID' => $meeting->meetingID));
      $meeting->url = array(
        'join_attend' => bbb_api_join(
          array(
            'fullName' => $account->name,
            'meetingID' => $meeting->meetingID,
            'password' => $meeting->attendeePW,
          )
        ),
        'join_moderate' => bbb_api_join(
          array(
            'fullName' => $account->name,
            'meetingID' => $meeting->meetingID,
            'password' => $meeting->moderatorPW,
          )
        ),
      );
      // Allow alteration for e.g. access control
      // Just implement hook_bigbluebutton_meeting_alter(&$data) {} in your module
      drupal_alter('bigbluebutton_meeting', &$meeting);
      // Static cache
      $meetings[$nid] = $meeting;
    }
  }
  return isset($meetings[$nid]) ? $meetings[$nid] : FALSE;
}

/**
 * Update meeting
 */
function bbb_update_meeting($node, $params = array()) {
  $params += array(
    'nid' => $node->nid,
    'name' => check_plain($node->title),
    'meetingToken' => '',
    'meetingID' => $node->nid,
    'attendeePW' => user_password(),
    'moderatorPW' => user_password(),
    'welcome' => t('Welcome to @title', array('@title' => $node->title)),
    'dialNumber' => '',
    'logoutURL' => url('node/' . $node->nid, array('absolute' => TRUE)),
    'created' => time(),
  );
  return drupal_write_record('bbb_meetings', $params, 'nid');
}

/**
 * Create meeting
 */
function bbb_create_meeting($node, $params = array()) {
  $params += array(
    'name' => check_plain($node->title),
    'meetingToken' => '',
    'meetingID' => $node->nid,
    'attendeePW' => user_password(),
    'moderatorPW' => user_password(),
    'welcome' => t('Welcome to @title', array('@title' => $node->title)),
    'dialNumber' => '',
    'logoutURL' => url('node/' . $node->nid, array('absolute' => TRUE)),
  );
  if ($data = bbb_api_create($params)) {
    return $data;
  }
  return FALSE;
}

/**
 * Store meeting
 */
function bbb_store_meeting($node, $params = array()) {
  $params += array(
    'nid' => $node->nid,
    'name' => check_plain($node->title),
    'meetingToken' => '',
    'meetingID' => $node->nid,
    'attendeePW' => user_password(),
    'moderatorPW' => user_password(),
    'welcome' => t('Welcome to @title', array('@title' => $node->title)),
    'dialNumber' => '',
    'logoutURL' => url('node/' . $node->nid, array('absolute' => TRUE)),
    'created' => time(),
  );
  return drupal_write_record('bbb_meetings', $params);
}

/**
 * Delete meeting
 */
function bbb_delete_meeting($nid) {
  return db_query("DELETE FROM {bbb_meetings} WHERE nid = %d", $nid);
}

/**
 * Get stats
 */
function bbb_get_user_stats($nid) {
  $rows = array();
  $result = db_query("SELECT * FROM {bbb_stats} WHERE nid = %d", $nid);
  while ($row = db_fetch_object($result)) {
    $rows[$row->uid] = $row;
  }
  return $rows;
}

/**
 * Get status
 */
function bbb_get_user_status($nid, $uid, $mode = 'subscribe') {
  $result = db_query("SELECT * FROM {bbb_stats} WHERE nid = %d AND uid = %d AND mode = '%s'", $nid, $uid, $mode);
  return db_fetch_object($result);
}

/**
 * Create stats
 */
function bbb_create_user_stats($stats) {
  return drupal_write_record('bbb_stats', $stats);
}

/* Menu Callbacks */

/**
 * Return meeting status; Menu callback
 */
function bbb_status($node) {
  $meeting = bbb_get_meeting($node->nid);
  drupal_json(array('is_running' => $meeting->is_running));
  die();
}

/**
 * Redirect to bigbluebutton instance; Menu callback
 *
 * @param OBJECT $node
 *   A Drupal node object
 * @param STRING $mode
 *   One of 'attendee' or 'moderator'
 */
function bbb_join($node, $mode) {
  global $user;

  $url = array();
  $meeting = bbb_get_meeting($node->nid);

  $stats = new stdClass();
  $stats->nid  = $node->nid;
  $stats->uid  = $user->uid;
  $stats->created = time();

  if (!$meeting->is_running && $mode == 'attend') {
    $stats->mode = 'subscribe';
  }
  else {
    $stats->mode = $mode;
  }

  // Log stats
  bbb_create_user_stats($stats);

  switch ($mode) {
    case 'subscribe':
      drupal_goto('node/' . $node->nid);
      break;
    case 'attend':
      if ($meeting->is_running) {
        if (BIGBLUEBUTTON_DISPLAY_MODE == 'blank') {
          bbb_redirect($node, $mode);
        }
      }
      else {
        drupal_goto('node/' . $node->nid);
      }
      break;
    case 'moderate':
      // Implicitly create meeting
      if (empty($meeting->meetingToken)) {
        if ($data = bbb_create_meeting($node, (array) $meeting)) {
          // Update local data
          bbb_update_meeting($node, array_merge((array) $meeting, (array) $data));
        }
      }

      if (BIGBLUEBUTTON_DISPLAY_MODE == 'blank') {
        bbb_redirect($node, $mode);
      }
      break;
  }

  return theme('bbb_meeting', $meeting, $mode, BIGBLUEBUTTON_DISPLAY_HEIGHT, BIGBLUEBUTTON_DISPLAY_WIDTH);
}

/**
 * Redirect to meeting
 */
function bbb_redirect($node, $mode = 'attend') {
  $meeting = bbb_get_meeting($node->nid);
  switch ($mode) {
    case 'attend':
      // Get redirect URL
      $url = parse_url($meeting->url['join_' . $mode]);
      drupal_goto($url['scheme'] . '://' . $url['host'] . $url['path'], $url['query']);
      break;
    case 'moderate':
      // Get redirect URL
      $url = parse_url($meeting->url['join_' . $mode]);
      drupal_goto($url['scheme'] . '://' . $url['host'] . $url['path'], $url['query']);
      break;
  }
}

/* Themeables */

/**
 * Theme inline meeting
 */
function theme_bbb_meeting($meeting, $mode = 'attend', $height = '580px', $width = '100%') {
  $output .= '<iframe src="' . url('node/' . $meeting->nid . '/redirect/' . $mode, array('absolute' => TRUE)) . '" style="height:' . $height . ';width:' . $width . ';border:0;"></iframe>';
  return $output;
}

/**
 * Theme meeting status
 */
function theme_bbb_meeting_status($meeting) {
  $output = '<div>';
  $output .= t('Status: !state', array('!state' => ($meeting->is_running ? t('Meeting is in progress.') : t('Meeting has not yet started.'))));
  $output .= '</div>';
  return $output;
}

/**
 * Theme meeting details block
 */
function theme_bbb_block_meeting($meeting) {
  $output = '<div class="meeting-details">';
  if ($meeting->welcome) {
    $output .= '<div class="welcome">' . $meeting->welcome . '</div>';
  }
  if ($meeting->is_running) {
    $output .= '<div class="status-is-running">' . t('Status: Meeting is running') . '</div>';
  }
  else {
    $output .= '<div class="status-is-not-running">' . t('Status: Meeting is not running') . '</div>';
  }
  if ($meeting->dialNumber) {
    $output .= '<div class="dial-number">' . t('Phone: @number', array('@number' => $meeting->dialNumber)) . '</div>';
  }
  if (user_access('moderate meetings') || user_access('administer bigbluebutton')) {
    $output .= '<div class="bbb-join-moderator">' . l($meeting->is_running ? t('Join meeting as moderator') : t('Start meeting'), 'node/' . $meeting->nid . '/meeting/moderate') . '</div>';
  }
  if (user_access('attend meetings') || user_access('administer bigbluebutton')) {
    $output .= '<div class="bbb-join-attendee">' . l('Join meeting', 'node/' . $meeting->nid . '/meeting/attend') . '</div>';
  }
  $output .= '</div>';
  return $output;
}
